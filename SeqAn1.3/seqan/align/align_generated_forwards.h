// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2010, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================


#ifndef SEQAN_HEADER_ALIGN_GENERATED_FORWARDS_H 
#define SEQAN_HEADER_ALIGN_GENERATED_FORWARDS_H 

//////////////////////////////////////////////////////////////////////////////
// NOTE: This file is automatically generated by build_forwards.py
//       Do not edit this file manually!
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// CLASSES
//////////////////////////////////////////////////////////////////////////////

namespace SEQAN_NAMESPACE_MAIN {

//____________________________________________________________________________
// Matrix

template <typename TValue, unsigned DIMENSION > class Matrix;       	// "core/include/seqan/align/matrix_base.h"(49)

//____________________________________________________________________________
// NDimensional

struct NDimensional;       	// "core/include/seqan/align/matrix_base.h"(45)

//____________________________________________________________________________
// SizeArr_

template <typename T> struct SizeArr_;       	// "core/include/seqan/align/matrix_base.h"(52)

} //namespace SEQAN_NAMESPACE_MAIN
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// Align

template <typename TSource, typename TSpec > class Align;       	// "core/include/seqan/align/align_base.h"(75)

//____________________________________________________________________________
// AlignColIterator

template <typename TSpec> struct AlignColIterator;       	// "core/include/seqan/align/align_cols.h"(114)

//____________________________________________________________________________
// AlignCols

template <typename TAlign> struct AlignCols;       	// "core/include/seqan/align/align_cols.h"(71)

//____________________________________________________________________________
// AlignConfig

template <bool TOP , bool LEFT , bool RIGHT , bool BOTTOM , typename TSpec > class AlignConfig;       	// "core/include/seqan/align/align_config.h"(74)

//____________________________________________________________________________
// AlignTraceback

template <typename TSize> struct AlignTraceback;       	// "core/include/seqan/align/align_traceback.h"(97)

//____________________________________________________________________________
// Alignment

template <typename TStringSet, typename TCargo, typename TGraphSpec> struct Alignment;       	// "core/include/seqan/align/global_alignment_banded.h"(56)
template <typename TStringSet, typename TCargo, typename TGraphSpec> struct Alignment;       	// "core/include/seqan/align/global_alignment_unbanded.h"(56)

//____________________________________________________________________________
// AnchorGaps

template <typename TGapAnchors> struct AnchorGaps;       	// "core/include/seqan/align/gaps_anchor.h"(51)
template <typename TGapAnchors > struct AnchorGaps;       	// "core/include/seqan/align/gaps_anchor.h"(87)

//____________________________________________________________________________
// ArrayGaps_

struct ArrayGaps_;       	// "core/include/seqan/align/gaps_base.h"(49)

//____________________________________________________________________________
// BandedWatermanEggert_

struct BandedWatermanEggert_;       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(52)

//____________________________________________________________________________
// Banded_

struct Banded_;       	// "core/include/seqan/align/local_alignment_enumeration_banded.h"(52)

//____________________________________________________________________________
// Begin__

struct Begin__;       	// "core/include/seqan/align/gaps_iterator_base.h"(48)

//____________________________________________________________________________
// Col

template <typename T> struct Col;       	// "core/include/seqan/align/align_metafunctions.h"(92)

//____________________________________________________________________________
// Cols

template <typename T> struct Cols;       	// "core/include/seqan/align/align_metafunctions.h"(70)

//____________________________________________________________________________
// End__

struct End__;       	// "core/include/seqan/align/gaps_iterator_base.h"(52)

//____________________________________________________________________________
// Fragment

template <typename TSize, typename TFragmentSpec> class Fragment;       	// "core/include/seqan/align/global_alignment_banded.h"(58)
template <typename TSize, typename TFragmentSpec> class Fragment;       	// "core/include/seqan/align/global_alignment_unbanded.h"(58)

//____________________________________________________________________________
// GapAnchor

template <typename TPos> struct GapAnchor;       	// "core/include/seqan/align/gap_anchor.h"(90)

//____________________________________________________________________________
// GappedValueType

template <typename T> struct GappedValueType;       	// "core/include/seqan/align/gapped_value_type.h"(69)

//____________________________________________________________________________
// Gaps

template <typename TSequence, typename TSpec > class Gaps;       	// "core/include/seqan/align/gaps_base.h"(74)

//____________________________________________________________________________
// GapsIterator

template <typename TSpec> struct GapsIterator;       	// "core/include/seqan/align/gaps_base.h"(47)
template <typename TSpec> struct GapsIterator;       	// "core/include/seqan/align/gaps_iterator_base.h"(64)

//____________________________________________________________________________
// Gotoh_

struct Gotoh_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(72)

//____________________________________________________________________________
// Graph

template <typename TSpec> class Graph;       	// "core/include/seqan/align/global_alignment_banded.h"(54)
template <typename TSpec> class Graph;       	// "core/include/seqan/align/global_alignment_unbanded.h"(54)

//____________________________________________________________________________
// HirschbergSet_

class HirschbergSet_;       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(63)

//____________________________________________________________________________
// Hirschberg_

struct Hirschberg_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(78)
struct Hirschberg_;       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(53)

//____________________________________________________________________________
// LocalAlignmentEnumerator

template <typename TScore, typename TSpec> class LocalAlignmentEnumerator;       	// "core/include/seqan/align/local_alignment_enumeration.h"(53)

//____________________________________________________________________________
// LocalAlignmentFinder

template <typename TScoreValue > class LocalAlignmentFinder;       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(109)

//____________________________________________________________________________
// MyersBitVector_

struct MyersBitVector_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(81)

//____________________________________________________________________________
// MyersHirschberg_

struct MyersHirschberg_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(84)

//____________________________________________________________________________
// NeedlemanWunsch_

struct NeedlemanWunsch_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(75)
struct NeedlemanWunsch_;       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(49)

//____________________________________________________________________________
// Position__

struct Position__;       	// "core/include/seqan/align/gaps_iterator_base.h"(56)

//____________________________________________________________________________
// Row

template <typename T> struct Row;       	// "core/include/seqan/align/align_metafunctions.h"(133)

//____________________________________________________________________________
// Rows

template <typename T> struct Rows;       	// "core/include/seqan/align/align_metafunctions.h"(111)

//____________________________________________________________________________
// Score

template <typename TScoreValue, typename TSpec> class Score;       	// "core/include/seqan/align/global_alignment_banded.h"(52)
template <typename TValue, typename TSpec> class Score;       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(47)
template <typename TScoreValue, typename TSpec> class Score;       	// "core/include/seqan/align/global_alignment_unbanded.h"(52)

//____________________________________________________________________________
// ScoreAndID

template <typename TValue, typename TID> class ScoreAndID;       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(62)

//____________________________________________________________________________
// SmithWaterman_

struct SmithWaterman_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(103)

//____________________________________________________________________________
// SortGapPos_

struct SortGapPos_;       	// "core/include/seqan/align/gap_anchor.h"(54)

//____________________________________________________________________________
// SortSeqPos_

struct SortSeqPos_;       	// "core/include/seqan/align/gap_anchor.h"(51)

//____________________________________________________________________________
// StringSetType

template <typename T> struct StringSetType;       	// "core/include/seqan/align/align_metafunctions.h"(158)

//____________________________________________________________________________
// TagRaw_

struct TagRaw_;       	// "core/include/seqan/align/align_base.h"(47)

//____________________________________________________________________________
// TraceBack_

struct TraceBack_;       	// "core/include/seqan/align/align_traceback.h"(74)

//____________________________________________________________________________
// Unbanded_

struct Unbanded_;       	// "core/include/seqan/align/local_alignment_enumeration_unbanded.h"(52)

//____________________________________________________________________________
// WatermanEggert_

struct WatermanEggert_;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(106)

//____________________________________________________________________________
// _LessGapAnchor

template <typename TGapAnchor, typename TTag> struct _LessGapAnchor;       	// "core/include/seqan/align/gap_anchor.h"(199)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// TYPEDEFS
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// ArrayGaps

typedef Tag<ArrayGaps_> ArrayGaps;       	// "core/include/seqan/align/gaps_base.h"(50)

//____________________________________________________________________________
// Banded

typedef Tag<Banded_> Banded;       	// "core/include/seqan/align/local_alignment_enumeration_banded.h"(53)

//____________________________________________________________________________
// BandedWatermanEggert

typedef Tag<BandedWatermanEggert_> BandedWatermanEggert;       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(53)

//____________________________________________________________________________
// Begin_

typedef Tag<Begin__> Begin_;       	// "core/include/seqan/align/gaps_iterator_base.h"(49)

//____________________________________________________________________________
// End_

typedef Tag<End__> End_;       	// "core/include/seqan/align/gaps_iterator_base.h"(53)

//____________________________________________________________________________
// Gotoh

typedef Tag<Gotoh_> Gotoh;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(73)

//____________________________________________________________________________
// Hirschberg

typedef Tag<Hirschberg_> Hirschberg;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(79)
typedef Tag<Hirschberg_> Hirschberg;       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(54)

//____________________________________________________________________________
// MyersBitVector

typedef Tag<MyersBitVector_> MyersBitVector;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(82)

//____________________________________________________________________________
// MyersHirschberg

typedef Tag<MyersHirschberg_> MyersHirschberg;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(85)

//____________________________________________________________________________
// NeedlemanWunsch

typedef Tag<NeedlemanWunsch_> NeedlemanWunsch;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(76)
typedef Tag<NeedlemanWunsch_> NeedlemanWunsch;       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(50)

//____________________________________________________________________________
// Position_

typedef Tag<Position__> Position_;       	// "core/include/seqan/align/gaps_iterator_base.h"(57)

//____________________________________________________________________________
// Raw

typedef Tag<TagRaw_> const Raw;       	// "core/include/seqan/align/align_base.h"(48)

//____________________________________________________________________________
// SmithWaterman

typedef Tag<SmithWaterman_> SmithWaterman;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(104)

//____________________________________________________________________________
// SortGapPos

typedef Tag<SortGapPos_> const SortGapPos;       	// "core/include/seqan/align/gap_anchor.h"(55)

//____________________________________________________________________________
// SortSeqPos

typedef Tag<SortSeqPos_> const SortSeqPos;       	// "core/include/seqan/align/gap_anchor.h"(52)

//____________________________________________________________________________
// TraceBack

typedef SimpleType<unsigned char, TraceBack_> TraceBack;       	// "core/include/seqan/align/align_traceback.h"(75)

//____________________________________________________________________________
// Unbanded

typedef Tag<Unbanded_> Unbanded;       	// "core/include/seqan/align/local_alignment_enumeration_unbanded.h"(53)

//____________________________________________________________________________
// WatermanEggert

typedef Tag<WatermanEggert_> WatermanEggert;       	// "core/include/seqan/align/alignment_algorithm_tags.h"(107)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

namespace SEQAN_NAMESPACE_MAIN {

//____________________________________________________________________________
// _dataFactors

template <typename TValue, unsigned DIMENSION> inline typename SizeArr_<Matrix<TValue, DIMENSION> >::Type & _dataFactors(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(288)
template <typename TValue, unsigned DIMENSION> inline typename SizeArr_<Matrix<TValue, DIMENSION> >::Type & _dataFactors(Matrix<TValue, DIMENSION> const & me);       	// "core/include/seqan/align/matrix_base.h"(295)

//____________________________________________________________________________
// _dataLengths

template <typename TValue, unsigned DIMENSION> inline typename SizeArr_<Matrix<TValue, DIMENSION> >::Type & _dataLengths(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(274)
template <typename TValue, unsigned DIMENSION> inline typename SizeArr_<Matrix<TValue, DIMENSION> >::Type const & _dataLengths(Matrix<TValue, DIMENSION> const & me);       	// "core/include/seqan/align/matrix_base.h"(281)

//____________________________________________________________________________
// assignHost

template <typename TValue, unsigned DIMENSION, typename THost> inline void assignHost(Matrix<TValue, DIMENSION> & me, THost const & value_);       	// "core/include/seqan/align/matrix_base.h"(340)

//____________________________________________________________________________
// assignValue

template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void assignValue(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_, TValue & val);       	// "core/include/seqan/align/align_iterator_base.h"(348)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void assignValue(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_, TValue const & val);       	// "core/include/seqan/align/align_iterator_base.h"(357)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void assignValue(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_, TValue & val);       	// "core/include/seqan/align/align_iterator_base.h"(366)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void assignValue(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_, TValue const & val);       	// "core/include/seqan/align/align_iterator_base.h"(375)

//____________________________________________________________________________
// begin

template <typename TValue, unsigned DIMENSION, typename TTag> inline typename Iterator<Matrix <TValue, DIMENSION>, Tag<TTag> const>::Type begin(Matrix<TValue, DIMENSION> & me, Tag<TTag> const);       	// "core/include/seqan/align/matrix_base.h"(556)
template <typename TValue, unsigned DIMENSION, typename TTag> inline typename Iterator<Matrix <TValue, DIMENSION> const, Tag<TTag> const>::Type begin(Matrix<TValue, DIMENSION> const & me, Tag<TTag> const);       	// "core/include/seqan/align/matrix_base.h"(563)

//____________________________________________________________________________
// container

template <typename TAlign, typename TSpec> inline typename Cols<TAlign>::Type container(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(136)
template <typename TAlign, typename TSpec> inline typename Cols<TAlign>::Type container(Iter<TAlign, AlignColIterator<TSpec> > const & me);       	// "core/include/seqan/align/align_iterator_base.h"(143)

//____________________________________________________________________________
// coordinate

template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Size< Matrix <TValue, DIMENSION> >::Type coordinate(Matrix<TValue, DIMENSION> & me, TPosition position_, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(537)
template <typename TValue, unsigned DIMENSION> inline typename Size< Matrix<TValue, DIMENSION> >::Type coordinate(Iter<Matrix<TValue, DIMENSION>, PositionIterator > & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(746)
template <typename TValue, unsigned DIMENSION> inline typename Size< Matrix<TValue, DIMENSION> >::Type coordinate(Iter<Matrix<TValue, DIMENSION> const, PositionIterator > & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(754)

//____________________________________________________________________________
// dependent

template <typename TValue, unsigned DIMENSION> inline bool dependent(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(305)

//____________________________________________________________________________
// dimension

template <typename TValue, unsigned DIMENSION> inline unsigned int dimension(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(381)

//____________________________________________________________________________
// empty

template <typename TValue, unsigned DIMENSION> inline bool empty(Matrix<TValue, DIMENSION> const & me);       	// "core/include/seqan/align/matrix_base.h"(421)

//____________________________________________________________________________
// end

template <typename TValue, unsigned DIMENSION, typename TTag> inline typename Iterator<Matrix <TValue, DIMENSION>, Tag<TTag> const >::Type end(Matrix<TValue, DIMENSION> & me, Tag<TTag> const);       	// "core/include/seqan/align/matrix_base.h"(573)
template <typename TValue, unsigned DIMENSION, typename TTag> inline typename Iterator<Matrix <TValue, DIMENSION> const, Tag<TTag> const >::Type end(Matrix<TValue, DIMENSION> const & me, Tag<TTag> const);       	// "core/include/seqan/align/matrix_base.h"(580)

//____________________________________________________________________________
// getValue

template <typename TAlign, typename TSpec, typename TPosition> inline typename GetValue<TAlign>::Type getValue(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_);       	// "core/include/seqan/align/align_iterator_base.h"(328)
template <typename TAlign, typename TSpec, typename TPosition> inline typename GetValue<TAlign>::Type getValue(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_);       	// "core/include/seqan/align/align_iterator_base.h"(336)

//____________________________________________________________________________
// goNext

template <typename TAlign, typename TSpec> inline void goNext(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(153)
template <typename TValue, unsigned DIMENSION> inline void goNext(Iter<Matrix<TValue, DIMENSION>, PositionIterator> & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(644)
template <typename TValue, unsigned DIMENSION> inline void goNext(Iter<Matrix<TValue, DIMENSION> const, PositionIterator> & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(652)
template <typename TValue, unsigned DIMENSION> inline void goNext(Iter<Matrix<TValue, DIMENSION>, PositionIterator> & me);       	// "core/include/seqan/align/matrix_base.h"(659)
template <typename TValue, unsigned DIMENSION> inline void goNext(Iter<Matrix<TValue, DIMENSION> const, PositionIterator> & me);       	// "core/include/seqan/align/matrix_base.h"(666)

//____________________________________________________________________________
// goPrevious

template <typename TAlign, typename TSpec> inline void goPrevious(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(196)
template <typename TValue, unsigned DIMENSION> inline void goPrevious(Iter< Matrix<TValue, DIMENSION>, PositionIterator > & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(678)
template <typename TValue, unsigned DIMENSION> inline void goPrevious(Iter< Matrix<TValue, DIMENSION> const, PositionIterator > & me, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(686)
template <typename TValue, unsigned DIMENSION> inline void goPrevious(Iter< Matrix<TValue, DIMENSION>, PositionIterator > & me);       	// "core/include/seqan/align/matrix_base.h"(693)
template <typename TValue, unsigned DIMENSION> inline void goPrevious(Iter< Matrix<TValue, DIMENSION> const, PositionIterator > & me);       	// "core/include/seqan/align/matrix_base.h"(700)

//____________________________________________________________________________
// goTo

template <typename TValue, unsigned DIMENSION, typename TPosition0, typename TPosition1> inline void goTo(Iter<Matrix<TValue, DIMENSION>, PositionIterator> & me, TPosition0 pos0, TPosition1 pos1);       	// "core/include/seqan/align/matrix_base.h"(711)
template <typename TValue, unsigned DIMENSION, typename TPosition0, typename TPosition1> inline void goTo(Iter<Matrix<TValue, DIMENSION> const, PositionIterator> & me, TPosition0 pos0, TPosition1 pos1);       	// "core/include/seqan/align/matrix_base.h"(719)
template <typename TValue, unsigned DIMENSION, typename TPosition0, typename TPosition1, typename TPosition2> inline void goTo(Iter<Matrix<TValue, DIMENSION>, PositionIterator> & me, TPosition0 pos0, TPosition1 pos1, TPosition2 pos2);       	// "core/include/seqan/align/matrix_base.h"(727)
template <typename TValue, unsigned DIMENSION, typename TPosition0, typename TPosition1, typename TPosition2> inline void goTo(Iter<Matrix<TValue, DIMENSION> const, PositionIterator> & me, TPosition0 pos0, TPosition1 pos1, TPosition2 pos2);       	// "core/include/seqan/align/matrix_base.h"(735)

//____________________________________________________________________________
// host

template <typename TAlign, typename TSpec> inline TAlign & host(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(109)
template <typename TAlign, typename TSpec> inline TAlign & host(Iter<TAlign, AlignColIterator<TSpec> > const & me);       	// "core/include/seqan/align/align_iterator_base.h"(116)
template <typename TValue, unsigned DIMENSION> inline typename Host<Matrix<TValue, DIMENSION> >::Type & host(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(324)
template <typename TValue, unsigned DIMENSION> inline typename Host<Matrix<TValue, DIMENSION> >::Type const & host(Matrix<TValue, DIMENSION> const & me);       	// "core/include/seqan/align/matrix_base.h"(331)

//____________________________________________________________________________
// length

template <typename TValue, unsigned DIMENSION> inline typename Size<Matrix<TValue, DIMENSION> >::Type length(Matrix<TValue, DIMENSION> const & me, unsigned int dim_);       	// "core/include/seqan/align/matrix_base.h"(408)
template <typename TValue, unsigned DIMENSION> inline typename Size<Matrix <TValue, DIMENSION> >::Type length(Matrix<TValue, DIMENSION> const & me);       	// "core/include/seqan/align/matrix_base.h"(415)

//____________________________________________________________________________
// moveHost

template <typename TValue, unsigned DIMENSION, typename THost> inline void moveHost(Matrix<TValue, DIMENSION> & me, THost const & value_);       	// "core/include/seqan/align/matrix_base.h"(349)

//____________________________________________________________________________
// moveValue

template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void moveValue(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_, TValue & val);       	// "core/include/seqan/align/align_iterator_base.h"(387)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void moveValue(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_, TValue const & val);       	// "core/include/seqan/align/align_iterator_base.h"(396)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void moveValue(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_, TValue & val);       	// "core/include/seqan/align/align_iterator_base.h"(405)
template <typename TAlign, typename TSpec, typename TPosition, typename TValue> inline void moveValue(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_, TValue const & val);       	// "core/include/seqan/align/align_iterator_base.h"(414)

//____________________________________________________________________________
// nextPosition

template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Position<Matrix <TValue, DIMENSION> >::Type nextPosition(Matrix<TValue, DIMENSION> & me, TPosition position_, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(499)
template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Position<Matrix <TValue, DIMENSION> >::Type nextPosition(Matrix<TValue, DIMENSION> const & me, TPosition position_, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(508)

//____________________________________________________________________________
// operator!=

template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator!=(Iter<TAlign1, AlignColIterator<TSpec> > & _left, Iter<TAlign2, AlignColIterator<TSpec> > & _right);       	// "core/include/seqan/align/align_iterator_base.h"(275)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator!=(Iter<TAlign1, AlignColIterator<TSpec> > const & _left, Iter<TAlign2, AlignColIterator<TSpec> > & _right);       	// "core/include/seqan/align/align_iterator_base.h"(283)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator!=(Iter<TAlign1, AlignColIterator<TSpec> > & _left, Iter<TAlign2, AlignColIterator<TSpec> > const & _right);       	// "core/include/seqan/align/align_iterator_base.h"(291)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator!=(Iter<TAlign1, AlignColIterator<TSpec> > const & _left, Iter<TAlign2, AlignColIterator<TSpec> > const & _right);       	// "core/include/seqan/align/align_iterator_base.h"(299)

//____________________________________________________________________________
// operator*

template <typename TValue> Matrix<TValue, 2> operator* (Matrix<TValue, 2> const & matrix1, Matrix<TValue, 2> const & matrix2);       	// "core/include/seqan/align/matrix_base.h"(817)
template <typename TValue> Matrix<TValue, 2> operator* (TValue const & scalar, Matrix<TValue, 2> const & matrix);       	// "core/include/seqan/align/matrix_base.h"(847)
template <typename TValue> Matrix<TValue, 2> operator* (Matrix<TValue, 2> const & matrix, TValue const & scalar);       	// "core/include/seqan/align/matrix_base.h"(862)

//____________________________________________________________________________
// operator+

template <typename TValue,unsigned DIMENSION> Matrix<TValue,DIMENSION> operator+ (Matrix<TValue,DIMENSION> const & matrix1,Matrix<TValue,DIMENSION> const & matrix2);       	// "core/include/seqan/align/matrix_base.h"(773)

//____________________________________________________________________________
// operator++

template <typename TAlign, typename TSpec> inline Iter<TAlign, AlignColIterator<TSpec> > & operator++(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(174)
template <typename TAlign, typename TSpec> inline Iter<TAlign, AlignColIterator<TSpec> > operator++(Iter<TAlign, AlignColIterator<TSpec> > & me, int);       	// "core/include/seqan/align/align_iterator_base.h"(184)

//____________________________________________________________________________
// operator-

template <typename TValue,unsigned DIMENSION> Matrix<TValue,DIMENSION> operator- (Matrix<TValue,DIMENSION> const & matrix1,Matrix<TValue,DIMENSION> const & matrix2);       	// "core/include/seqan/align/matrix_base.h"(795)

//____________________________________________________________________________
// operator--

template <typename TAlign, typename TSpec> inline Iter<TAlign, AlignColIterator<TSpec> > & operator--(Iter<TAlign, AlignColIterator<TSpec> > & me);       	// "core/include/seqan/align/align_iterator_base.h"(217)
template <typename TAlign, typename TSpec> inline Iter<TAlign, AlignColIterator<TSpec> > operator--(Iter<TAlign, AlignColIterator<TSpec> > & me, int);       	// "core/include/seqan/align/align_iterator_base.h"(227)

//____________________________________________________________________________
// operator<<

template <typename TValue > ::std::ostream& operator<<(::std::ostream &out, const Matrix<TValue,2> &matrix);       	// "core/include/seqan/align/matrix_base.h"(1067)

//____________________________________________________________________________
// operator==

template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator==(Iter<TAlign1, AlignColIterator<TSpec> > & _left, Iter<TAlign2, AlignColIterator<TSpec> > & _right);       	// "core/include/seqan/align/align_iterator_base.h"(240)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator==(Iter<TAlign1, AlignColIterator<TSpec> > const & _left, Iter<TAlign2, AlignColIterator<TSpec> > & _right);       	// "core/include/seqan/align/align_iterator_base.h"(248)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator==(Iter<TAlign1, AlignColIterator<TSpec> > & _left, Iter<TAlign2, AlignColIterator<TSpec> > const & _right);       	// "core/include/seqan/align/align_iterator_base.h"(256)
template <typename TAlign1, typename TAlign2, typename TSpec> inline bool operator==(Iter<TAlign1, AlignColIterator<TSpec> > const & _left, Iter<TAlign2, AlignColIterator<TSpec> > const & _right);       	// "core/include/seqan/align/align_iterator_base.h"(264)
template <typename TValue, unsigned DIMENSION1, unsigned DIMENSION2> bool operator== (Matrix<TValue, DIMENSION1> const & matrix1, Matrix<TValue, DIMENSION2> const & matrix2);       	// "core/include/seqan/align/matrix_base.h"(878)

//____________________________________________________________________________
// previousPosition

template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Position<Matrix <TValue, DIMENSION> >::Type previousPosition(Matrix<TValue, DIMENSION> & me, TPosition position_, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(517)
template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Position<Matrix <TValue, DIMENSION> >::Type previousPosition(Matrix<TValue, DIMENSION> const & me, TPosition position_, unsigned int dimension_);       	// "core/include/seqan/align/matrix_base.h"(526)

//____________________________________________________________________________
// resize

template <typename TValue, unsigned DIMENSION> inline void resize(Matrix<TValue, DIMENSION> & me);       	// "core/include/seqan/align/matrix_base.h"(446)
template <typename TValue, unsigned DIMENSION, typename TFillValue> inline void resize(Matrix<TValue, DIMENSION> & me, TFillValue myValue);       	// "core/include/seqan/align/matrix_base.h"(472)

//____________________________________________________________________________
// setDimension

template <typename TValue, unsigned DIMENSION> inline void setDimension(Matrix<TValue, DIMENSION> & me, unsigned int dim_);       	// "core/include/seqan/align/matrix_base.h"(391)

//____________________________________________________________________________
// setHost

template <typename TAlign, typename TSpec> inline void setHost(Iter<TAlign, AlignColIterator<TSpec> > & me, TAlign & _host);       	// "core/include/seqan/align/align_iterator_base.h"(126)
template <typename TValue, unsigned DIMENSION, typename THost> inline void setHost(Matrix<TValue, DIMENSION> & me, THost & host_);       	// "core/include/seqan/align/matrix_base.h"(314)

//____________________________________________________________________________
// setLength

template <typename TValue, unsigned DIMENSION, typename TLength> inline void setLength(Matrix<TValue, DIMENSION> & me, unsigned int dim_, TLength length_);       	// "core/include/seqan/align/matrix_base.h"(432)

//____________________________________________________________________________
// transpose

template <typename TValue> Matrix<TValue,2> transpose(Matrix<TValue,2> const & matrix);       	// "core/include/seqan/align/matrix_base.h"(1038)

//____________________________________________________________________________
// value

template <typename TAlign, typename TSpec, typename TPosition> inline typename Reference<TAlign>::Type value(Iter<TAlign, AlignColIterator<TSpec> > & me, TPosition pos_);       	// "core/include/seqan/align/align_iterator_base.h"(310)
template <typename TAlign, typename TSpec, typename TPosition> inline typename Reference<TAlign>::Type value(Iter<TAlign, AlignColIterator<TSpec> > const & me, TPosition pos_);       	// "core/include/seqan/align/align_iterator_base.h"(318)
template <typename TValue, unsigned DIMENSION, typename TPosition> inline typename Reference<Matrix<TValue, DIMENSION> >::Type value(Matrix<TValue, DIMENSION> & me, TPosition position_);       	// "core/include/seqan/align/matrix_base.h"(590)
template <typename TValue, unsigned DIMENSION, typename TOrdinate1, typename TOrdinate2> inline typename Reference<Matrix<TValue, DIMENSION> >::Type value(Matrix<TValue, DIMENSION> & me, TOrdinate1 i1, TOrdinate2 i2);       	// "core/include/seqan/align/matrix_base.h"(602)
template <typename TValue, unsigned DIMENSION, typename TOrdinate1, typename TOrdinate2, typename TOrdinate3> inline typename Reference<Matrix<TValue, DIMENSION> >::Type value(Matrix<TValue, DIMENSION> & me, TOrdinate1 i1, TOrdinate2 i2, TOrdinate3 i3);       	// "core/include/seqan/align/matrix_base.h"(616)
template <typename TValue, unsigned DIMENSION, typename TOrdinate1, typename TOrdinate2, typename TOrdinate3, typename TOrdinate4> inline typename Reference<Matrix<TValue, DIMENSION> >::Type value(Matrix<TValue, DIMENSION> & me, TOrdinate1 i1, TOrdinate2 i2, TOrdinate3 i3, TOrdinate4 i4);       	// "core/include/seqan/align/matrix_base.h"(631)

} //namespace SEQAN_NAMESPACE_MAIN
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// _alignBandedGotoh

template <typename TTrace, typename TSequenceH, typename TSequenceV, typename TScore, typename TValPair, typename TIndexPair, typename TDiagonal, typename TAlignConfig> inline typename Value<TScore>::Type _alignBandedGotoh(TTrace& trace, TSequenceH const & seqH, TSequenceV const & seqV, TScore const & sc, TValPair& overallMaxValue, TIndexPair& overallMaxIndex, TDiagonal diagL, TDiagonal diagU, TAlignConfig const);       	// "core/include/seqan/align/global_alignment_banded_gotoh_impl.h"(174)

//____________________________________________________________________________
// _alignBandedGotohTrace

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TId, typename TTrace, typename TValPair, typename TIndexPair, typename TDiagonal> inline void _alignBandedGotohTrace(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TTrace const& trace, TValPair const& overallMaxValue, TIndexPair const& overallMaxIndex, TDiagonal const diagL, TDiagonal const diagU);       	// "core/include/seqan/align/global_alignment_banded_gotoh_impl.h"(74)

//____________________________________________________________________________
// _alignBandedNeedlemanWunsch

template <typename TTrace, typename TSequenceH, typename TSequenceV, typename TScore, typename TValPair, typename TIndexPair, typename TDiagonal, typename TAlignConfig> inline typename Value<TScore>::Type _alignBandedNeedlemanWunsch(TTrace& trace, TSequenceH const & seqH, TSequenceV const & seqV, TScore const & sc, TValPair& overallMaxValue, TIndexPair& overallMaxIndex, TDiagonal diagL, TDiagonal diagU, TAlignConfig const);       	// "core/include/seqan/align/global_alignment_banded_needleman_wunsch_impl.h"(194)

//____________________________________________________________________________
// _alignBandedNeedlemanWunschTrace

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TId, typename TTrace, typename TValPair, typename TIndexPair, typename TDiagonal> inline void _alignBandedNeedlemanWunschTrace(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TTrace const& trace, TValPair const& overallMaxValue, TIndexPair const& overallMaxIndex, TDiagonal const diagL, TDiagonal const diagU);       	// "core/include/seqan/align/global_alignment_banded_needleman_wunsch_impl.h"(74)

//____________________________________________________________________________
// _alignBandedSmithWaterman

template <typename TScoreValue, typename TSequenceH, typename TSequenceV, typename TScore, typename TDiagonal> inline TScoreValue _alignBandedSmithWaterman(LocalAlignmentFinder<TScoreValue>& finder, TSequenceH const & seqH, TSequenceV const & seqV, TScore const& sc, TScoreValue const cutoff, TDiagonal const diagL, TDiagonal const diagU);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(75)

//____________________________________________________________________________
// _alignBandedSmithWatermanDeclump

template <typename TScoreValue, typename TSequenceH, typename TSequenceV, typename TScore, typename TDiagonal> inline void _alignBandedSmithWatermanDeclump(LocalAlignmentFinder<TScoreValue>& finder, TSequenceH const & seqH, TSequenceV const & seqV, TScore const& sc, TScoreValue const cutoff, TDiagonal const diagL, TDiagonal const diagU);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(204)

//____________________________________________________________________________
// _alignBandedSmithWatermanTrace

template <typename TScoreValue, typename TSequenceH, typename TSequenceV, typename TId, typename TScore, typename TDiagonal> inline Pair<Pair<TDiagonal> > _alignBandedSmithWatermanTrace(LocalAlignmentFinder<TScoreValue> & finder, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TScore& sc, TDiagonal diagL, TDiagonal diagU);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(366)

//____________________________________________________________________________
// _alignGotoh

template <typename TTrace, typename TSequenceH, typename TSequenceV, typename TScore, typename TValPair, typename TIndexPair, typename TAlignConfig> inline typename Value<TScore>::Type _alignGotoh(TTrace& trace, TSequenceH const& seqH, TSequenceV const & seqV, TScore const & sc, TValPair& overallMaxValue, TIndexPair& overallMaxIndex, typename Value<TTrace>::Type& initialDir, TAlignConfig const);       	// "core/include/seqan/align/global_alignment_gotoh_impl.h"(178)

//____________________________________________________________________________
// _alignGotohTrace

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TId, typename TTrace, typename TIndexPair, typename TVal> inline void _alignGotohTrace(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TTrace const& trace, TIndexPair const& overallMaxIndex, TVal const initialDir);       	// "core/include/seqan/align/global_alignment_gotoh_impl.h"(72)

//____________________________________________________________________________
// _alignNeedlemanWunsch

template <typename TTrace, typename TSequenceH, typename TSequenceV, typename TScore, typename TValPair, typename TIndexPair, typename TAlignConfig> inline typename Value<TScore>::Type _alignNeedlemanWunsch(TTrace & trace, TSequenceH const & seqH, TSequenceV const & seqV, TScore const & _sc, TValPair & overallMaxValue, TIndexPair & overallMaxIndex, TAlignConfig const);       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(175)

//____________________________________________________________________________
// _alignNeedlemanWunschMatrix

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TTrace, typename TIndexPair> inline void _alignNeedlemanWunschMatrix(TAlign &, TSequenceH const &, TSequenceV const &, TTrace const &, TIndexPair const &);       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(75)

//____________________________________________________________________________
// _alignNeedlemanWunschTrace

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TId, typename TTrace, typename TIndexPair> void _alignNeedlemanWunschTrace(TAlign & align, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TTrace const & trace, TIndexPair const & overallMaxIndex);       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(92)

//____________________________________________________________________________
// _alignSmithWaterman

template <typename TTrace, typename TSequenceH, typename TSequenceV, typename TScore, typename TIndexPair, typename TForbidden> inline typename Value<TScore>::Type _alignSmithWaterman(TTrace& trace, TSequenceH const & seqH, TSequenceV const & seqV, TScore const & sc, typename Value<TTrace>::Type& initialDir, TIndexPair& indexPair, TForbidden& forbidden);       	// "core/include/seqan/align/local_alignment_smith_waterman_impl.h"(210)

//____________________________________________________________________________
// _alignSmithWatermanTrace

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TId, typename TTrace, typename TVal, typename TIndexPair, typename TForbidden> inline void _alignSmithWatermanTrace(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TId id1, TId id2, TTrace const& trace, TVal const initialDir, TIndexPair const& indexPair, TForbidden& forbidden);       	// "core/include/seqan/align/local_alignment_smith_waterman_impl.h"(104)

//____________________________________________________________________________
// _alignTracePrint

template <typename TSize, typename TSequenceH, typename TSequenceV, typename TId, typename TPos, typename TTraceValue> inline void _alignTracePrint(AlignTraceback<TSize> & tb, TSequenceH const &, TSequenceV const &, TId const, TPos const, TId const, TPos const, TPos const segLen, TTraceValue const tv);       	// "core/include/seqan/align/align_traceback.h"(129)

//____________________________________________________________________________
// _assignSourceLength

template <typename TSize, typename TSource, typename TGapAnchors> inline void _assignSourceLength(TSize & size, Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(233)

//____________________________________________________________________________
// _begin1

inline int& _begin1(HirschbergSet_ & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(106)
inline int const& _begin1(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(112)

//____________________________________________________________________________
// _begin2

inline int& _begin2(HirschbergSet_ & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(153)
inline int const& _begin2(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(158)

//____________________________________________________________________________
// _beginPositionAlignCols

template <typename TAlignCols> inline typename Position<TAlignCols>::Type _beginPositionAlignCols(TAlignCols const & me);       	// "core/include/seqan/align/align_cols.h"(285)

//____________________________________________________________________________
// _configValueBottom

template <bool TTop, bool TLeft, bool TRight, typename TSpec> inline bool _configValueBottom(AlignConfig<TTop, TLeft, TRight, true, TSpec> const);       	// "core/include/seqan/align/align_config.h"(379)
template <bool TTop, bool TLeft, bool TRight, typename TSpec> inline bool _configValueBottom(AlignConfig<TTop, TLeft, TRight, false, TSpec> const);       	// "core/include/seqan/align/align_config.h"(386)

//____________________________________________________________________________
// _configValueLeft

template <bool TTop, bool TRight, bool TBottom, typename TSpec> inline bool _configValueLeft(AlignConfig<TTop, true, TRight, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(347)
template <bool TTop, bool TRight, bool TBottom, typename TSpec> inline bool _configValueLeft(AlignConfig<TTop, false, TRight, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(354)

//____________________________________________________________________________
// _configValueRight

template <bool TTop, bool TLeft, bool TBottom, typename TSpec> inline bool _configValueRight(AlignConfig<TTop, TLeft, true, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(363)
template <bool TTop, bool TLeft, bool TBottom, typename TSpec> inline bool _configValueRight(AlignConfig<TTop, TLeft, false, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(370)

//____________________________________________________________________________
// _configValueTop

template <bool TLeft, bool TRight, bool TBottom, typename TSpec> inline bool _configValueTop(AlignConfig<true, TLeft, TRight, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(331)
template <bool TLeft, bool TRight, bool TBottom, typename TSpec> inline bool _configValueTop(AlignConfig<false, TLeft, TRight, TBottom, TSpec> const);       	// "core/include/seqan/align/align_config.h"(338)

//____________________________________________________________________________
// _dataAnchors

template <typename TSource, typename TGapAnchors> inline TGapAnchors & _dataAnchors(Gaps<TSource, AnchorGaps<TGapAnchors> > & me);       	// "core/include/seqan/align/gaps_anchor.h"(247)
template <typename TSource, typename TGapAnchors> inline TGapAnchors const & _dataAnchors(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(254)

//____________________________________________________________________________
// _dataSource

template <typename TSource, typename TGapAnchors> inline Holder<TSource> & _dataSource(Gaps<TSource, AnchorGaps<TGapAnchors> > & me);       	// "core/include/seqan/align/gaps_anchor.h"(215)
template <typename TSource, typename TGapAnchors> inline Holder<TSource> const & _dataSource(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(222)

//____________________________________________________________________________
// _end1

inline int& _end1(HirschbergSet_ & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(130)
inline int const& _end1(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(135)

//____________________________________________________________________________
// _end2

inline int& _end2(HirschbergSet_ & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(176)
inline int const& _end2(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(181)

//____________________________________________________________________________
// _endPositionAlignCols

template <typename TAlignCols> inline typename Position<TAlignCols>::Type _endPositionAlignCols(TAlignCols const & me);       	// "core/include/seqan/align/align_cols.h"(354)

//____________________________________________________________________________
// _getAnchor

template <typename TAnchor, typename TSource, typename TGapAnchors, typename TIdx> inline void _getAnchor(TAnchor & anchor, Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, TIdx idx);       	// "core/include/seqan/align/gaps_anchor.h"(265)

//____________________________________________________________________________
// _getNextBestEndPosition

template <typename TScoreValue> typename LocalAlignmentFinder<TScoreValue>::TMatrixPosition _getNextBestEndPosition(LocalAlignmentFinder<TScoreValue> & sw , TScoreValue cutoff);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(661)

//____________________________________________________________________________
// _globalAlignment

template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TSequenceId, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> inline TScoreValue _globalAlignment(TAlign & align, TSequenceH const & sequenceH, TSequenceV const & sequenceV, TSequenceId idH, TSequenceId idV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, Gotoh const & );       	// "core/include/seqan/align/global_alignment_banded_gotoh_impl.h"(326)
template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TSequenceId, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> inline TScoreValue _globalAlignment(TAlign & align, TSequenceH const & sequenceH, TSequenceV const & sequenceV, TSequenceId idH, TSequenceId idV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, NeedlemanWunsch const & );       	// "core/include/seqan/align/global_alignment_banded_needleman_wunsch_impl.h"(311)
template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TSequenceId, typename TScore, typename TAlignConfig> inline typename Value<TScore>::Type _globalAlignment(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TSequenceId idH, TSequenceId idV, TScore const& sc, TAlignConfig const, Gotoh const & );       	// "core/include/seqan/align/global_alignment_gotoh_impl.h"(310)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue _globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & score_, Hirschberg const & );       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(391)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> int _globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, MyersHirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_myers_hirschberg_impl.h"(179)
template <typename TAlign, typename TSequenceH, typename TSequenceV, typename TSequenceId, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> inline TScoreValue _globalAlignment(TAlign & align, TSequenceH const & sequenceH, TSequenceV const & sequenceV, TSequenceId idH, TSequenceId idV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, NeedlemanWunsch const & );       	// "core/include/seqan/align/global_alignment_needleman_wunsch_impl.h"(286)

//____________________________________________________________________________
// _globalAlignmentScore

template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV> int _globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, MyersBitVector const & algorithmTag);       	// "core/include/seqan/align/global_alignment_myers_impl.h"(67)

//____________________________________________________________________________
// _goNextGapAnchorIterator

template <typename T> inline void _goNextGapAnchorIterator(T & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(563)

//____________________________________________________________________________
// _goPreviousGapAnchorIterator

template <typename T> inline void _goPreviousGapAnchorIterator(T & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(584)

//____________________________________________________________________________
// _goToGapAnchorIterator

template <typename T, typename TPos> inline void _goToGapAnchorIterator(T & me, TPos pos);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(604)

//____________________________________________________________________________
// _helperIsNegative

template <typename T> inline bool _helperIsNegative(T, False);       	// "core/include/seqan/align/gaps_anchor.h"(632)
template <typename T> inline bool _helperIsNegative(T t, True);       	// "core/include/seqan/align/gaps_anchor.h"(639)

//____________________________________________________________________________
// _initFirstColumn

template <bool TTop, bool TRight, bool TBottom, typename TSpec, typename TElement, typename TCost> inline void _initFirstColumn(AlignConfig<TTop, false, TRight, TBottom, TSpec> const, TElement& element, TCost const cost);       	// "core/include/seqan/align/align_config.h"(92)
template <bool TTop, bool TRight, bool TBottom, typename TSpec, typename TElement, typename TCost> inline void _initFirstColumn(AlignConfig<TTop, true, TRight, TBottom, TSpec> const, TElement& element, TCost const);       	// "core/include/seqan/align/align_config.h"(104)

//____________________________________________________________________________
// _initFirstRow

template <bool TLeft, bool TRight, bool TBottom, typename TSpec, typename TElement, typename TCost> inline void _initFirstRow(AlignConfig<false, TLeft, TRight, TBottom, TSpec> const, TElement& element, TCost const cost);       	// "core/include/seqan/align/align_config.h"(116)
template <bool TLeft, bool TRight, bool TBottom, typename TSpec, typename TElement, typename TCost> inline void _initFirstRow(AlignConfig<true, TLeft, TRight, TBottom, TSpec> const, TElement& element, TCost const);       	// "core/include/seqan/align/align_config.h"(128)

//____________________________________________________________________________
// _initLocalAlignmentFinder

template <typename TSequenceH, typename TSequenceV, typename TScoreValue, typename TDiagonal> void _initLocalAlignmentFinder(TSequenceH const & seqH, TSequenceV const & seqV, LocalAlignmentFinder<TScoreValue> & finder, BandedWatermanEggert const &, TDiagonal const lowerDiag, TDiagonal const upperDiag);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(462)
template <typename TSequenceH, typename TSequenceV, typename TScoreValue, typename TTag> void _initLocalAlignmentFinder(TSequenceH const & seqH, TSequenceV const & seqV, LocalAlignmentFinder<TScoreValue> & finder, TTag);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(162)

//____________________________________________________________________________
// _isClumping

template <typename TSpec, typename TSize> inline bool _isClumping(String<bool, TSpec> const& forbidden, TSize row, TSize col, TSize len2);       	// "core/include/seqan/align/local_alignment_smith_waterman_impl.h"(75)
template <typename TSize> inline bool _isClumping(Nothing&, TSize, TSize, TSize);       	// "core/include/seqan/align/local_alignment_smith_waterman_impl.h"(85)

//____________________________________________________________________________
// _lastColumn

template <bool TTop, bool TLeft, bool TBottom, typename TSpec, typename TValue1, typename TIndex1, typename TColumn> inline void _lastColumn(AlignConfig<TTop, TLeft, false, TBottom, TSpec> const, TValue1& maxValue, TIndex1&, TColumn const& column);       	// "core/include/seqan/align/align_config.h"(175)
template <bool TTop, bool TLeft, bool TBottom, typename TSpec, typename TValue1, typename TIndex1, typename TColumn> inline void _lastColumn(AlignConfig<TTop, TLeft, true, TBottom, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TColumn const& column);       	// "core/include/seqan/align/align_config.h"(188)
template <bool TTop, bool TLeft, bool TBottom, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastColumn(AlignConfig<TTop, TLeft, false, TBottom, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TValue2 const val, TIndex2 const row, TIndex2 const col);       	// "core/include/seqan/align/align_config.h"(275)
template <bool TTop, bool TLeft, bool TBottom, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastColumn(AlignConfig<TTop, TLeft, true, TBottom, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TValue2 const val, TIndex2 const row, TIndex2 const col);       	// "core/include/seqan/align/align_config.h"(290)

//____________________________________________________________________________
// _lastRow

template <bool TTop, bool TLeft, bool TRight, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastRow(AlignConfig<TTop, TLeft, TRight, false, TSpec> const, TValue1&, TIndex1&, TValue2 const, TIndex2 const);       	// "core/include/seqan/align/align_config.h"(145)
template <bool TTop, bool TLeft, bool TRight, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastRow(AlignConfig<TTop, TLeft, TRight, true, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TValue2 const val, TIndex2 const index);       	// "core/include/seqan/align/align_config.h"(159)
template <bool TTop, bool TLeft, bool TRight, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastRow(AlignConfig<TTop, TLeft, TRight, false, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TValue2 const val, TIndex2 const row, TIndex2 const col);       	// "core/include/seqan/align/align_config.h"(305)
template <bool TTop, bool TLeft, bool TRight, typename TSpec, typename TValue1, typename TIndex1, typename TValue2, typename TIndex2> inline void _lastRow(AlignConfig<TTop, TLeft, TRight, true, TSpec> const, TValue1& maxValue, TIndex1& maxIndex, TValue2 const val, TIndex2 const row, TIndex2 const col);       	// "core/include/seqan/align/align_config.h"(320)

//____________________________________________________________________________
// _localAlignment

template <typename TScoreValue, typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue2, typename TScoreSpec, typename TDiagonal> inline TScoreValue _localAlignment(LocalAlignmentFinder<TScoreValue> & finder, Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue2, TScoreSpec> const& sc, TScoreValue cutoff, TDiagonal diag1, TDiagonal diag2, BandedWatermanEggert const );       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(500)
template <typename TAlign, typename TSequenceH, typename TId, typename TSequenceV, typename TScore> inline typename Value<TScore>::Type _localAlignment(TAlign& align, TSequenceH const & seqH, TSequenceV const & seqV, TId idH, TId idV, TScore const& sc, SmithWaterman);       	// "core/include/seqan/align/local_alignment_smith_waterman_impl.h"(346)

//____________________________________________________________________________
// _localAlignmentNext

template <typename TScoreValue, typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV,typename TScore, typename TDiagonal> inline TScoreValue _localAlignmentNext(LocalAlignmentFinder<TScoreValue> & finder, Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, TScore const& sc, TScoreValue cutoff, TDiagonal diag1, TDiagonal diag2, BandedWatermanEggert const & );       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(549)

//____________________________________________________________________________
// _maxOfAlignment

template <typename TScoreValue, bool TTop, bool TLeft, typename TSpec, typename TValue, typename TIndex, typename TSize> inline TScoreValue _maxOfAlignment(AlignConfig<TTop, TLeft, false, false, TSpec> const, TValue& maxValue, TIndex&, TSize const, TSize const);       	// "core/include/seqan/align/align_config.h"(213)
template <typename TScoreValue, bool TTop, bool TLeft, typename TSpec, typename TValue, typename TIndex, typename TSize> inline TScoreValue _maxOfAlignment(AlignConfig<TTop, TLeft, true, false, TSpec> const, TValue& maxValue, TIndex& maxIndex, TSize const len1, TSize const);       	// "core/include/seqan/align/align_config.h"(227)
template <typename TScoreValue, bool TTop, bool TLeft, typename TSpec, typename TValue, typename TIndex, typename TSize> inline TScoreValue _maxOfAlignment(AlignConfig<TTop, TLeft, false, true, TSpec> const, TValue& maxValue, TIndex& maxIndex, TSize const, TSize const len2);       	// "core/include/seqan/align/align_config.h"(242)
template <typename TScoreValue, bool TTop, bool TLeft, typename TSpec, typename TValue, typename TIndex, typename TSize> inline TScoreValue _maxOfAlignment(AlignConfig<TTop, TLeft, true, true, TSpec> const, TValue& maxValue, TIndex& maxIndex, TSize const len1, TSize const len2);       	// "core/include/seqan/align/align_config.h"(257)

//____________________________________________________________________________
// _pumpTraceToGaps

template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TSize> void _pumpTraceToGaps(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, AlignTraceback<TSize> const & trace);       	// "core/include/seqan/align/gaps_base.h"(359)

//____________________________________________________________________________
// _reinitAnchorGaps

template <typename TSequence, typename TGapAnchors> inline void _reinitAnchorGaps(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(202)

//____________________________________________________________________________
// _score

inline int& _score(HirschbergSet_ & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(199)
inline int const& _score(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(209)

//____________________________________________________________________________
// _setBegin1

inline void _setBegin1(HirschbergSet_ & me, int const & new_begin);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(121)

//____________________________________________________________________________
// _setBegin2

inline void _setBegin2(HirschbergSet_ & me, int const & new_begin);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(167)

//____________________________________________________________________________
// _setEnd1

inline void _setEnd1(HirschbergSet_ & me, int const & new_end);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(144)

//____________________________________________________________________________
// _setEnd2

inline void _setEnd2(HirschbergSet_ & me, int const & new_end);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(190)

//____________________________________________________________________________
// _setForbiddenCell

template <typename TSpec, typename TSize> inline void _setForbiddenCell(String<bool, TSpec>& forbidden, TSize len1, TSize len2, TSize numRows);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(177)
template <typename TSize> inline void _setForbiddenCell(Nothing&, TSize, TSize, TSize);       	// "core/include/seqan/align/local_alignment_banded_waterman_eggert_impl.h"(188)

//____________________________________________________________________________
// _setScore

inline void _setScore(HirschbergSet_ & me,int new_score);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(218)

//____________________________________________________________________________
// _smithWaterman

template <typename TSourceH, typename TGapsSpecH, typename TSourceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue _smithWaterman(Gaps<TSourceH, TGapsSpecH> & gapsH, Gaps<TSourceV, TGapsSpecV> & gapsV, LocalAlignmentFinder<TScoreValue> & sw_finder, Score<TScoreValue, TScoreSpec> const & score_, TScoreValue cutoff);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(706)

//____________________________________________________________________________
// _smithWatermanDeclump

template <typename TScoreValue, typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> void _smithWatermanDeclump(LocalAlignmentFinder<TScoreValue> & sw , Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, Simple> const & score_);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(330)

//____________________________________________________________________________
// _smithWatermanGetMatrix

template <typename TScoreValue, typename TStringH, typename TStringV> TScoreValue _smithWatermanGetMatrix(LocalAlignmentFinder<TScoreValue> & sw, TStringH const & strH, TStringV const & strV, Score<TScoreValue, Simple> const & score_, TScoreValue cutoff);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(215)

//____________________________________________________________________________
// _smithWatermanGetNext

template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue _smithWatermanGetNext(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, LocalAlignmentFinder<TScoreValue> & sw_finder , Score<TScoreValue, TScoreSpec> const & score_, TScoreValue cutoff);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(750)

//____________________________________________________________________________
// _smithWatermanTrace

template <typename TSourceH, typename TGapsSpecH, typename TSourceV, typename TGapsSpecV, typename TScoreValue, unsigned DIMENSION> typename Iterator<Matrix<TScoreValue, DIMENSION>, Standard >::Type _smithWatermanTrace(Gaps<TSourceH, TGapsSpecH> & gapsH, Gaps<TSourceV, TGapsSpecV> & gapsV, typename LocalAlignmentFinder<TScoreValue>::TBoolMatrix & fb_matrix, Iter< Matrix<TScoreValue, DIMENSION>, PositionIterator > source_, Score<TScoreValue, Simple> const & scoring_);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(549)

//____________________________________________________________________________
// _unclippedLength

template <typename TSource, typename TGapAnchors> inline typename Size<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type _unclippedLength(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(309)

//____________________________________________________________________________
// _writeDebugMatrix

template <typename TSource> void _writeDebugMatrix(TSource s1,TSource s2);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(260)
template <typename TSource> void _writeDebugMatrix(TSource s1,TSource s2);       	// "core/include/seqan/align/global_alignment_myers_hirschberg_impl.h"(63)

//____________________________________________________________________________
// assignSource

template <typename TSequence, typename TGapAnchor, typename TSequence2> inline void assignSource(Gaps<TSequence, AnchorGaps<TGapAnchor> > & gaps, TSequence2 const & source);       	// "core/include/seqan/align/gaps_anchor.h"(620)
template <typename TSequence, typename TSpec, typename TValue> inline void assignSource(Gaps<TSequence, TSpec> & gaps, TValue const & value);       	// "core/include/seqan/align/gaps_base.h"(448)

//____________________________________________________________________________
// assignValue

template <typename TGaps, typename TSpec, typename TValue> inline void assignValue(Iter<TGaps, GapsIterator<TSpec> > & me, TValue const & val);       	// "core/include/seqan/align/gaps_iterator_base.h"(256)
template <typename TGaps, typename TSpec, typename TValue> inline void assignValue(Iter<TGaps, GapsIterator<TSpec> > const & me, TValue const & val);       	// "core/include/seqan/align/gaps_iterator_base.h"(268)

//____________________________________________________________________________
// atBegin

template <typename TGaps, typename TGapAnchors> inline bool atBegin(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(293)
template <typename TGaps, typename TGapAnchors> inline bool atBegin(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(301)
template <typename TGaps> inline bool atBegin(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(439)
template <typename TGaps> inline bool atBegin(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(446)

//____________________________________________________________________________
// atEnd

template <typename TGaps, typename TGapAnchors> inline bool atEnd(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(313)
template <typename TGaps, typename TGapAnchors> inline bool atEnd(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(321)
template <typename TGaps> inline bool atEnd(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(458)
template <typename TGaps> inline bool atEnd(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(465)

//____________________________________________________________________________
// begin

template <typename TAlign, typename TTag> inline typename Iterator<AlignCols<TAlign>, Tag<TTag> const>::Type begin(AlignCols<TAlign> & me, Tag<TTag> const tag_);       	// "core/include/seqan/align/align_cols.h"(333)
template <typename TAlign, typename TTag> inline typename Iterator<AlignCols<TAlign> const, Tag<TTag> const>::Type begin(AlignCols<TAlign> const & me, Tag<TTag> const tag_);       	// "core/include/seqan/align/align_cols.h"(341)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type begin(Gaps<TSource, AnchorGaps<TGapAnchors> > & me, Standard);       	// "core/include/seqan/align/gaps_anchor.h"(447)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > const>::Type begin(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, Standard);       	// "core/include/seqan/align/gaps_anchor.h"(455)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type begin(Gaps<TSource, AnchorGaps<TGapAnchors> > & me, Rooted);       	// "core/include/seqan/align/gaps_anchor.h"(463)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > const>::Type begin(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, Rooted);       	// "core/include/seqan/align/gaps_anchor.h"(471)

//____________________________________________________________________________
// beginPosition

template <typename TAlign> inline typename Position<AlignCols<TAlign> >::Type beginPosition(AlignCols<TAlign> const & me);       	// "core/include/seqan/align/align_cols.h"(312)
template <typename TAlign> inline typename Position<AlignCols<TAlign> >::Type beginPosition(AlignCols<TAlign> & me);       	// "core/include/seqan/align/align_cols.h"(319)
template <typename TSource, typename TGapAnchors> inline typename Position<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type beginPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(520)
template <typename TSource, typename TGapAnchors> inline typename Position<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type beginPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > const & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(527)

//____________________________________________________________________________
// clear

template <typename TSequence, typename TSpec> inline void clear(Gaps<TSequence, TSpec> & gaps);       	// "core/include/seqan/align/gaps_base.h"(463)
template <typename TScoreValue> void clear(LocalAlignmentFinder<TScoreValue> & sw_finder);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(187)

//____________________________________________________________________________
// clearClipping

template <typename TSource, typename TSpec> inline void clearClipping(Align<TSource, TSpec> & align_);       	// "core/include/seqan/align/align_base.h"(495)
template <typename TSequence, typename TGapAnchors> inline void clearClipping(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(341)

//____________________________________________________________________________
// clearGaps

template <typename TSource, typename TSpec> inline void clearGaps(Align<TSource, TSpec> & me);       	// "core/include/seqan/align/align_base.h"(566)
template <typename TSequence, typename TGapAnchors> inline void clearGaps(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(353)

//____________________________________________________________________________
// clippedBeginPosition

template <typename TSequence, typename TGapAnchors> inline typename Position<Gaps<TSequence, AnchorGaps<TGapAnchors> > >::Type clippedBeginPosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(854)

//____________________________________________________________________________
// clippedEndPosition

template <typename TSequence, typename TGapAnchors> inline typename Position<Gaps<TSequence, AnchorGaps<TGapAnchors> > >::Type clippedEndPosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(865)

//____________________________________________________________________________
// col

template <typename TSource, typename TSpec, typename TPosition> inline typename Col<Align<TSource, TSpec> >::Type col(Align<TSource, TSpec> & me, TPosition _pos);       	// "core/include/seqan/align/align_base.h"(354)
template <typename TSource, typename TSpec, typename TPosition> inline typename Col<Align<TSource, TSpec> const>::Type col(Align<TSource, TSpec> const & me, TPosition _pos);       	// "core/include/seqan/align/align_base.h"(362)

//____________________________________________________________________________
// cols

template <typename TSource, typename TSpec> inline typename Cols<Align<TSource, TSpec> >::Type cols(Align<TSource, TSpec> & me);       	// "core/include/seqan/align/align_base.h"(319)
template <typename TSource, typename TSpec> inline typename Cols<Align<TSource, TSpec> const>::Type cols(Align<TSource, TSpec> const & me);       	// "core/include/seqan/align/align_base.h"(326)

//____________________________________________________________________________
// container

template <typename TGaps, typename TGapsArray> inline TGaps & container(Iter<TGaps, GapsIterator<AnchorGaps<TGapsArray> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(148)
template <typename TGaps, typename TGapsArray> inline TGaps & container(Iter<TGaps, GapsIterator<AnchorGaps<TGapsArray> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(155)
template <typename TGaps, typename TSpec> inline TGaps & container(Iter<TGaps, GapsIterator<TSpec> > & me);       	// "core/include/seqan/align/gaps_iterator_base.h"(282)
template <typename TGaps, typename TSpec> inline TGaps & container(Iter<TGaps, GapsIterator<TSpec> > const & me);       	// "core/include/seqan/align/gaps_iterator_base.h"(289)

//____________________________________________________________________________
// countCharacters

template <typename TGaps, typename TGapAnchors> inline typename Size<TGaps>::Type countCharacters(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(280)
template <typename TGaps> inline typename Size<TGaps>::Type countCharacters(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(258)

//____________________________________________________________________________
// countGaps

template <typename TGaps, typename TGapAnchors> inline typename Size<TGaps>::Type countGaps(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(263)
template <typename TGaps> inline typename Size<TGaps>::Type countGaps(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(244)

//____________________________________________________________________________
// createSource

template <typename TSequence, typename TGapAnchors> inline void createSource(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(580)

//____________________________________________________________________________
// detach

template <typename TSource, typename TSpec> inline void detach(Align<TSource, TSpec> & me);       	// "core/include/seqan/align/align_base.h"(375)

//____________________________________________________________________________
// difference

template <typename TGaps, typename TGapAnchors> inline typename Difference<Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type difference(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & lhs, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & rhs);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(688)
template <typename TGaps> inline typename Difference<Iter<TGaps, GapsIterator<ArrayGaps> > >::Type difference(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(673)

//____________________________________________________________________________
// end

template <typename TAlign, typename TTag> inline typename Iterator<AlignCols<TAlign>, Tag<TTag> const>::Type end(AlignCols<TAlign> & me, Tag<TTag> const tag_);       	// "core/include/seqan/align/align_cols.h"(396)
template <typename TAlign, typename TTag> inline typename Iterator<AlignCols<TAlign> const, Tag<TTag> const>::Type end(AlignCols<TAlign> const & me, Tag<TTag> const tag_);       	// "core/include/seqan/align/align_cols.h"(404)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type end(Gaps<TSource, AnchorGaps<TGapAnchors> > & me, Standard);       	// "core/include/seqan/align/gaps_anchor.h"(483)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > const>::Type end(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, Standard);       	// "core/include/seqan/align/gaps_anchor.h"(491)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type end(Gaps<TSource, AnchorGaps<TGapAnchors> > & me, Rooted);       	// "core/include/seqan/align/gaps_anchor.h"(499)
template <typename TSource, typename TGapAnchors> inline typename Iterator<Gaps<TSource, AnchorGaps<TGapAnchors> > const>::Type end(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, Rooted);       	// "core/include/seqan/align/gaps_anchor.h"(507)

//____________________________________________________________________________
// endPosition

template <typename TAlign> inline typename Position<AlignCols<TAlign> >::Type endPosition(AlignCols<TAlign> & me);       	// "core/include/seqan/align/align_cols.h"(375)
template <typename TAlign> inline typename Position<AlignCols<TAlign> const>::Type endPosition(AlignCols<TAlign> const & me);       	// "core/include/seqan/align/align_cols.h"(382)
template <typename TSource, typename TGapAnchors> inline typename Position<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type endPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(539)
template <typename TSource, typename TGapAnchors> inline typename Position<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type endPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > const & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(546)

//____________________________________________________________________________
// getScore

template <typename TScoreValue, typename TScoreSpec> inline TScoreValue getScore(LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Banded> const & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_banded.h"(91)
template <typename TScoreValue, typename TScoreSpec> inline TScoreValue getScore(LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Unbanded> const & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_unbanded.h"(89)
template <typename TScoreValue> TScoreValue getScore(LocalAlignmentFinder<TScoreValue> const & sw);       	// "core/include/seqan/align/local_alignment_waterman_eggert_impl.h"(197)

//____________________________________________________________________________
// getValue

template <typename TGaps, typename TGapAnchors> inline typename GetValue< Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type getValue(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(184)
template <typename TGaps, typename TGapAnchors> inline typename GetValue< Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const>::Type getValue(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(194)
template <typename TGaps> inline typename GetValue<Iter<TGaps, GapsIterator<ArrayGaps> > >::Type getValue(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(190)
template <typename TGaps> inline typename GetValue<Iter<TGaps, GapsIterator<ArrayGaps> > const>::Type getValue(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(201)

//____________________________________________________________________________
// globalAlignment

template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(86)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(109)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(124)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(139)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(160)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(184)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(201)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(218)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(239)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(257)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(272)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(287)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(310)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(329)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(346)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(363)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, Hirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(68)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, Hirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(80)
template <typename TSequence, typename TAlignSpec> int globalAlignment(Align<TSequence, TAlignSpec> & align, MyersHirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(91)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> int globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, MyersHirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(101)
template <typename TSequence, typename TAlignSpec> int globalAlignment(Align<TSequence, TAlignSpec> & align, MyersBitVector const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(112)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> int globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, MyersBitVector const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(122)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(84)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(105)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(118)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(131)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(150)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(172)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(187)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(202)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(221)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(237)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(250)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(263)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(284)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(301)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(316)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(331)

//____________________________________________________________________________
// globalAlignmentScore

template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(384)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(403)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(420)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(437)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(456)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_banded.h"(475)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(492)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/global_alignment_banded.h"(509)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, Hirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(137)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, Hirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(148)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV> int globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, MyersHirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(162)
template <typename TString, typename TSpec> int globalAlignmentScore(StringSet<TString, TSpec> const & strings, MyersHirschberg const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(171)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV> int globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, MyersBitVector const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(185)
template <typename TString, typename TSpec> int globalAlignmentScore(StringSet<TString, TSpec> const & strings, MyersBitVector const & algorithmTag);       	// "core/include/seqan/align/global_alignment_specialized.h"(192)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(350)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(367)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(382)
template <typename TAlphabetH, typename TSpecH, typename TAlphabetV, typename TSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(String<TAlphabetH, TSpecH> const & seqH, String<TAlphabetV, TSpecV> const & seqV, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(397)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(414)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, typename TAlgoTag> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, TAlgoTag const & algoTag);       	// "core/include/seqan/align/global_alignment_unbanded.h"(431)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec, bool TOP, bool LEFT, bool RIGHT, bool BOTTOM, typename TACSpec> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, AlignConfig<TOP, LEFT, RIGHT, BOTTOM, TACSpec> const & alignConfig);       	// "core/include/seqan/align/global_alignment_unbanded.h"(446)
template <typename TString, typename TSpec, typename TScoreValue, typename TScoreSpec> TScoreValue globalAlignmentScore(StringSet<TString, TSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/global_alignment_unbanded.h"(461)

//____________________________________________________________________________
// goFurther

template <typename TGaps, typename TGapAnchors, typename TSize> inline void goFurther(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me, TSize steps);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(663)
template <typename TGaps, typename TDifference> inline void goFurther(Iter<TGaps, GapsIterator<ArrayGaps> > & it, TDifference delta);       	// "core/include/seqan/align/gaps_iterator_array.h"(355)
template <typename TGaps, typename TSpec, typename TDifference> inline void goFurther(Iter<TGaps, GapsIterator<TSpec> > & it, TDifference steps);       	// "core/include/seqan/align/gaps_iterator_base.h"(349)

//____________________________________________________________________________
// goNext

template <typename TGaps, typename TGapAnchors> inline void goNext(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(641)
template <typename TGaps> inline bool goNext(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(307)

//____________________________________________________________________________
// goPrevious

template <typename TGaps, typename TGapAnchors> inline void goPrevious(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(652)
template <typename TGaps> inline bool goPrevious(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(272)

//____________________________________________________________________________
// host

template <typename TAlign> inline typename Host<AlignCols<TAlign> >::Type & host(AlignCols<TAlign> & me);       	// "core/include/seqan/align/align_cols.h"(217)
template <typename TAlign> inline typename Host<AlignCols<TAlign> const>::Type & host(AlignCols<TAlign> const & me);       	// "core/include/seqan/align/align_cols.h"(225)

//____________________________________________________________________________
// insertGap

template <typename TSequence, typename TSpec, typename TPosition> inline void insertGap(Gaps<TSequence, TSpec> & gaps, TPosition clippedViewPos);       	// "core/include/seqan/align/gaps_base.h"(278)
template <typename TGaps, typename TSpec> inline void insertGap(Iter<TGaps, GapsIterator<TSpec> > & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(228)

//____________________________________________________________________________
// insertGaps

template <typename TSequence, typename TGapAnchors, typename TPosition, typename TCount> inline void insertGaps(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps, TPosition clippedViewPos, TCount count);       	// "core/include/seqan/align/gaps_anchor.h"(379)
template <typename TGaps, typename TGapAnchors, typename TCount> inline void insertGaps(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me, TCount size);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(411)
template <typename TGaps, typename TCount> inline void insertGaps(Iter<TGaps, GapsIterator<ArrayGaps> > const & it, TCount count);       	// "core/include/seqan/align/gaps_iterator_array.h"(477)

//____________________________________________________________________________
// integrateAlign

template <typename TSource1, typename TSpec1, typename TSource2, typename TSpec2, typename TPos> void integrateAlign(Align<TSource1, TSpec1> & align, Align<TSource2, TSpec2> const & infixAlign, String<TPos> const & viewPos);       	// "core/include/seqan/align/alignment_operations.h"(83)
template <typename TSource, typename TSpec1, typename TSpec2> void integrateAlign(Align<TSource, TSpec1> & align, Align<typename Infix<TSource>::Type, TSpec2> const & infixAlign);       	// "core/include/seqan/align/alignment_operations.h"(133)

//____________________________________________________________________________
// isClipped

template <typename TGaps, typename TGapAnchors> inline bool isClipped(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(252)

//____________________________________________________________________________
// isGap

template <typename TSequence, typename TGapAnchors, typename TPosition> inline bool isGap(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps, TPosition clippedViewPos);       	// "core/include/seqan/align/gaps_anchor.h"(364)
template <typename TGaps, typename TGapAnchors> inline bool isGap(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(228)
template <typename TGaps> inline bool isGap(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(157)

//____________________________________________________________________________
// isUnknown

template <typename TGaps, typename TGapAnchors> inline bool isUnknown(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(239)

//____________________________________________________________________________
// iter

template <typename TAlign, typename TPosition, typename TTag> inline typename Iterator<AlignCols<TAlign>, Tag<TTag> const>::Type iter(AlignCols<TAlign> & me, TPosition pos_, Tag<TTag> const);       	// "core/include/seqan/align/align_cols.h"(241)
template <typename TAlign, typename TPosition, typename TTag> inline typename Iterator<AlignCols<TAlign> const, Tag<TTag> const>::Type iter(AlignCols<TAlign> const & me, TPosition pos_, Tag<TTag> const);       	// "core/include/seqan/align/align_cols.h"(250)

//____________________________________________________________________________
// length

template <typename TAlign> inline typename Size<AlignCols<TAlign> >::Type length(AlignCols<TAlign> const & me);       	// "core/include/seqan/align/align_cols.h"(415)
template <typename TSource, typename TGapAnchors> inline typename Size<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type length(Gaps<TSource, AnchorGaps<TGapAnchors> > & me);       	// "core/include/seqan/align/gaps_anchor.h"(429)
template <typename TSource, typename TGapAnchors> inline typename Size<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type length(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(436)

//____________________________________________________________________________
// localAlignment

template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/local_alignment_banded.h"(68)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/local_alignment_banded.h"(95)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme, int lowerDiag, int upperDiag);       	// "core/include/seqan/align/local_alignment_banded.h"(122)
template <typename TSequence, typename TAlignSpec, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(Align<TSequence, TAlignSpec> & align, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/local_alignment_unbanded.h"(66)
template <typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/local_alignment_unbanded.h"(83)
template <typename TStringSet, typename TCargo, typename TGraphSpec, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(Graph<Alignment<TStringSet, TCargo, TGraphSpec> > & alignmentGraph, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/local_alignment_unbanded.h"(98)
template <typename TSize, typename TFragmentSpec, typename TStringSpec, typename TSequence, typename TStringSetSpec, typename TScoreValue, typename TScoreSpec> TScoreValue localAlignment(String<Fragment<TSize, TFragmentSpec>, TStringSpec> & fragmentString, StringSet<TSequence, TStringSetSpec> const & strings, Score<TScoreValue, TScoreSpec> const & scoringScheme);       	// "core/include/seqan/align/local_alignment_unbanded.h"(119)

//____________________________________________________________________________
// lowerBoundGapAnchor

template <typename TGapAnchor, typename TSearchValue> inline typename Iterator<TGapAnchor, Standard>::Type lowerBoundGapAnchor(TGapAnchor const& gaps, TSearchValue const val, SortSeqPos);       	// "core/include/seqan/align/gap_anchor.h"(230)
template <typename TGapAnchor, typename TSearchValue> inline typename Iterator<TGapAnchor, Standard>::Type lowerBoundGapAnchor(TGapAnchor const& gaps, TSearchValue const val, SortGapPos);       	// "core/include/seqan/align/gap_anchor.h"(246)

//____________________________________________________________________________
// move

template <typename TSource, typename TSpec> inline void move(Align<TSource, TSpec> & target, Align<TSource, TSpec> & source);       	// "core/include/seqan/align/align_base.h"(226)

//____________________________________________________________________________
// nextLocalAlignment

template <typename TScoreValue, typename TScoreSpec, typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> inline bool nextLocalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Banded> & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_banded.h"(104)
template <typename TScoreValue, typename TScoreSpec, typename TSequence, typename TAlignSpec> inline bool nextLocalAlignment(Align<TSequence, TAlignSpec> & align, LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Banded> & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_banded.h"(118)
template <typename TScoreValue, typename TScoreSpec, typename TSequenceH, typename TGapsSpecH, typename TSequenceV, typename TGapsSpecV> inline bool nextLocalAlignment(Gaps<TSequenceH, TGapsSpecH> & gapsH, Gaps<TSequenceV, TGapsSpecV> & gapsV, LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Unbanded> & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_unbanded.h"(103)
template <typename TScoreValue, typename TScoreSpec, typename TSequence, typename TAlignSpec> inline bool nextLocalAlignment(Align<TSequence, TAlignSpec> & align, LocalAlignmentEnumerator<Score<TScoreValue, TScoreSpec>, Unbanded> & enumerator);       	// "core/include/seqan/align/local_alignment_enumeration_unbanded.h"(114)

//____________________________________________________________________________
// operator!=

template <typename TSource, typename TSpec> inline bool operator!=(Align<TSource, TSpec> const & lhs, Align<TSource, TSpec> const & rhs);       	// "core/include/seqan/align/align_base.h"(628)
template <typename TSequence, typename TSpec> inline bool operator!=(Gaps<TSequence, TSpec> const & lhs, Gaps<TSequence, TSpec> const & rhs);       	// "core/include/seqan/align/gaps_base.h"(495)
template <typename TGaps, typename TGapAnchors> inline bool operator!= ( Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & left, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & right);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(348)
template <typename TGaps> inline bool operator!=(Iter<TGaps, GapsIterator<ArrayGaps> > const & _lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & _rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(659)

//____________________________________________________________________________
// operator+

template <typename TGaps, typename TGapAnchors, typename TDifference> inline Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > operator+(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & lhs, TDifference d);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(724)
template <typename TGaps, typename TDifference> inline Iter<TGaps, GapsIterator<ArrayGaps> > operator+(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, TDifference d);       	// "core/include/seqan/align/gaps_iterator_array.h"(723)

//____________________________________________________________________________
// operator++

template <typename TGaps, typename TSpec> inline Iter<TGaps, GapsIterator<TSpec> > & operator++(Iter<TGaps, GapsIterator<TSpec> > & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(183)
template <typename TGaps, typename TSpec> inline Iter<TGaps, GapsIterator<TSpec> > operator++(Iter<TGaps, GapsIterator<TSpec> > & it, int);       	// "core/include/seqan/align/gaps_iterator_base.h"(191)

//____________________________________________________________________________
// operator+=

template <typename TGaps, typename TSpec, typename TDiff> inline Iter<TGaps, GapsIterator<TSpec> > & operator+=(Iter<TGaps, GapsIterator<TSpec> > & it, TDiff diff);       	// "core/include/seqan/align/gaps_iterator_base.h"(323)

//____________________________________________________________________________
// operator-

template <typename TGaps, typename TGapAnchors> inline typename Difference<Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type operator-(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & lhs, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & rhs);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(700)
template <typename TGaps, typename TGapAnchors, typename TDifference> inline Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > operator-(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & lhs, TDifference d);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(711)
template <typename TGaps> inline typename Difference<Iter<TGaps, GapsIterator<ArrayGaps> > >::Type operator-(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(699)
template <typename TGaps, typename TDifference> inline Iter<TGaps, GapsIterator<ArrayGaps> > operator-(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, TDifference d);       	// "core/include/seqan/align/gaps_iterator_array.h"(710)

//____________________________________________________________________________
// operator--

template <typename TGaps, typename TSpec> inline Iter<TGaps, GapsIterator<TSpec> > & operator--(Iter<TGaps, GapsIterator<TSpec> > & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(204)
template <typename TGaps, typename TSpec> inline Iter<TGaps, GapsIterator<TSpec> > operator--(Iter<TGaps, GapsIterator<TSpec> > & it, int);       	// "core/include/seqan/align/gaps_iterator_base.h"(212)

//____________________________________________________________________________
// operator-=

template <typename TGaps, typename TSpec, typename TDiff> inline Iter<TGaps, GapsIterator<TSpec> > & operator-=(Iter<TGaps, GapsIterator<TSpec> > & it, TDiff diff);       	// "core/include/seqan/align/gaps_iterator_base.h"(335)

//____________________________________________________________________________
// operator<

template <typename TGaps, typename TGapAnchors> inline bool operator< ( Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & left, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & right);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(361)
template <typename TGaps> inline bool operator<(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(595)

//____________________________________________________________________________
// operator<<

template <typename TStream, typename TSource, typename TSpec> inline TStream & operator<<(TStream & target, Align<TSource, TSpec> const & source);       	// "core/include/seqan/align/align_base.h"(513)
template <typename TStream, typename TSource, typename TSpec> inline TStream & operator<<(TStream & stream, Gaps<TSource, TSpec> const & gaps);       	// "core/include/seqan/align/gaps_base.h"(329)

//____________________________________________________________________________
// operator<=

template <typename TGaps, typename TGapAnchors> inline bool operator<=( Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & left, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & right);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(374)
template <typename TGaps> inline bool operator<=(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(621)

//____________________________________________________________________________
// operator==

template <typename TSource, typename TSpec> inline bool operator==(Align<TSource, TSpec> const & lhs, Align<TSource, TSpec> const & rhs);       	// "core/include/seqan/align/align_base.h"(609)
template <typename TAlign> inline bool operator==(AlignCols<TAlign> const & left, AlignCols<TAlign> const & right);       	// "core/include/seqan/align/align_cols.h"(427)
template <typename TSequence, typename TSpec> inline bool operator==(Gaps<TSequence, TSpec> const & lhs, Gaps<TSequence, TSpec> const & rhs);       	// "core/include/seqan/align/gaps_base.h"(475)
template <typename TSequence, typename TSpec, typename TRightHandSide> inline bool operator==(Gaps<TSequence, TSpec> const & lhs, TRightHandSide const & rhs);       	// "core/include/seqan/align/gaps_base.h"(483)
template <typename TGaps, typename TGapAnchors> inline bool operator== ( Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & left, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & right);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(335)
template <typename TGaps> inline bool operator==(Iter<TGaps, GapsIterator<ArrayGaps> > const & _lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & _rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(645)
inline bool operator==(HirschbergSet_ const & lhs, HirschbergSet_ const & rhs);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(248)

//____________________________________________________________________________
// operator>

template <typename TGaps, typename TGapAnchors> inline bool operator> ( Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & left, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & right);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(387)
template <typename TGaps> inline bool operator>(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(608)

//____________________________________________________________________________
// operator>=

template <typename TGaps, typename TGapAnchors> inline bool operator>=(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & lhs, Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & rhs);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(399)
template <typename TGaps> inline bool operator>=(Iter<TGaps, GapsIterator<ArrayGaps> > const & lhs, Iter<TGaps, GapsIterator<ArrayGaps> > const & rhs);       	// "core/include/seqan/align/gaps_iterator_array.h"(633)

//____________________________________________________________________________
// position

template <typename TGaps, typename TGapAnchors> inline typename Position<Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type position(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & it);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(676)
template <typename TGaps> inline typename Position<Iter<TGaps, GapsIterator<ArrayGaps> > >::Type position(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(218)

//____________________________________________________________________________
// positionGapToSeq

template <typename TSource, typename TGapAnchors, typename TPosition> inline TPosition positionGapToSeq(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, TPosition pos);       	// "core/include/seqan/align/gaps_anchor.h"(697)

//____________________________________________________________________________
// positionSeqToGap

template <typename TSource, typename TGapAnchors, typename TPosition> inline TPosition positionSeqToGap(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me, TPosition pos);       	// "core/include/seqan/align/gaps_anchor.h"(769)

//____________________________________________________________________________
// print

inline void print(HirschbergSet_ const & me);       	// "core/include/seqan/align/global_alignment_hirschberg_impl.h"(236)

//____________________________________________________________________________
// removeGap

template <typename TSequence, typename TSpec, typename TPosition> inline typename Size<Gaps<TSequence, TSpec> >::Type removeGap(Gaps<TSequence, TSpec> & gaps, TPosition clippedViewPos);       	// "core/include/seqan/align/gaps_base.h"(291)
template <typename TGaps, typename TSpec> inline typename Size<TGaps>::Type removeGap(Iter<TGaps, GapsIterator<TSpec> > & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(242)

//____________________________________________________________________________
// removeGaps

template <typename TSequence, typename TGapAnchors, typename TPosition, typename TCount> inline typename Size<Gaps<TSequence, AnchorGaps<TGapAnchors> > >::Type removeGaps(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps, TPosition clippedViewPos, TCount count);       	// "core/include/seqan/align/gaps_anchor.h"(413)
template <typename TGaps, typename TGapAnchors, typename TCount> inline typename Size<TGaps>::Type removeGaps(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & it, TCount size_);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(487)
template <typename TGaps, typename TCount> inline typename Size<TGaps>::Type removeGaps(Iter<TGaps, GapsIterator<ArrayGaps> > const & it, TCount count);       	// "core/include/seqan/align/gaps_iterator_array.h"(543)

//____________________________________________________________________________
// row

template <typename TSource, typename TSpec, typename TPosition> inline typename Row<Align<TSource, TSpec> >::Type & row(Align<TSource, TSpec> & me, TPosition _pos);       	// "core/include/seqan/align/align_base.h"(287)
template <typename TSource, typename TSpec, typename TPosition> inline typename Row<Align<TSource, TSpec> const>::Type & row(Align<TSource, TSpec> const & me, TPosition _pos);       	// "core/include/seqan/align/align_base.h"(295)

//____________________________________________________________________________
// rows

template <typename TSource, typename TSpec> inline typename Rows<Align<TSource, TSpec> >::Type & rows(Align<TSource, TSpec> & me);       	// "core/include/seqan/align/align_base.h"(251)
template <typename TSource, typename TSpec> inline typename Rows<Align<TSource, TSpec> const>::Type & rows(Align<TSource, TSpec> const & me);       	// "core/include/seqan/align/align_base.h"(258)

//____________________________________________________________________________
// setBeginPosition

template <typename TSource, typename TGapAnchors, typename TPosition> inline void setBeginPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > & gaps, TPosition sourcePosition);       	// "core/include/seqan/align/gaps_anchor.h"(557)

//____________________________________________________________________________
// setClippedBeginPosition

template <typename TSequence, typename TGapAnchors, typename TPosition> inline void setClippedBeginPosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps, TPosition unclippedViewPosition);       	// "core/include/seqan/align/gaps_anchor.h"(832)

//____________________________________________________________________________
// setClippedEndPosition

template <typename TSequence, typename TGapAnchors, typename TPosition> inline void setClippedEndPosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > & gaps, TPosition unclippedViewPosition);       	// "core/include/seqan/align/gaps_anchor.h"(843)

//____________________________________________________________________________
// setEndPosition

template <typename TSource, typename TGapAnchors, typename TPosition> inline void setEndPosition(Gaps<TSource, AnchorGaps<TGapAnchors> > & gaps, TPosition sourcePosition);       	// "core/include/seqan/align/gaps_anchor.h"(568)

//____________________________________________________________________________
// setSource

template <typename TSequence, typename TGapAnchor> inline void setSource(Gaps<TSequence, AnchorGaps<TGapAnchor> > & gaps, TSequence & source);       	// "core/include/seqan/align/gaps_anchor.h"(602)
template <typename TSequence, typename TGapAnchor> inline void setSource(Gaps<TSequence const, AnchorGaps<TGapAnchor> > & gaps, TSequence & source);       	// "core/include/seqan/align/gaps_anchor.h"(609)

//____________________________________________________________________________
// setStrings

template <typename TSource, typename TSpec, typename TSpec2> inline void setStrings(Align<TSource, TSpec> & me, StringSet<TSource, TSpec2> & stringset);       	// "core/include/seqan/align/align_base.h"(540)

//____________________________________________________________________________
// source

template <typename TSequence, typename TGapAnchor> inline typename Source<Gaps<TSequence, AnchorGaps<TGapAnchor> > >::Type & source(Gaps<TSequence, AnchorGaps<TGapAnchor> > const & gaps);       	// "core/include/seqan/align/gaps_anchor.h"(591)
template <typename TGaps, typename TGapAnchors> inline typename Source<Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const>::Type source(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(166)
template <typename TGaps, typename TGapAnchors> inline typename Source<Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type source(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & me);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(173)
template <typename TGaps, typename TSpec> inline typename Source<Iter<TGaps, GapsIterator<TSpec> > >::Type source(Iter<TGaps, GapsIterator<TSpec> > & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(303)
template <typename TGaps, typename TSpec> inline typename Source<Iter<TGaps, GapsIterator<TSpec> > const>::Type source(Iter<TGaps, GapsIterator<TSpec> > const & it);       	// "core/include/seqan/align/gaps_iterator_base.h"(310)

//____________________________________________________________________________
// sourceSegment

template <typename TSequence, typename TSpec> inline typename Infix<TSequence>::Type sourceSegment(Gaps<TSequence, TSpec> const & gaps);       	// "core/include/seqan/align/gaps_base.h"(428)
template <typename TSequence, typename TSpec> inline typename Infix<TSequence>::Type sourceSegment(Gaps<TSequence, TSpec> & gaps);       	// "core/include/seqan/align/gaps_base.h"(435)

//____________________________________________________________________________
// stringSet

template <typename TSource, typename TSpec> inline typename StringSetType<Align<TSource, TSpec> >::Type stringSet(Align<TSource, TSpec> & me);       	// "core/include/seqan/align/align_base.h"(588)

//____________________________________________________________________________
// toSourcePosition

template <typename TSequence, typename TGapAnchors, typename TPosition> inline typename Position<TSequence>::Type toSourcePosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps, TPosition clippedViewPos);       	// "core/include/seqan/align/gaps_anchor.h"(821)

//____________________________________________________________________________
// toViewPosition

template <typename TSequence, typename TGapAnchors, typename TPosition> inline typename Position<Gaps<TSequence, AnchorGaps<TGapAnchors> > >::Type toViewPosition(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps, TPosition sourcePosition);       	// "core/include/seqan/align/gaps_anchor.h"(810)

//____________________________________________________________________________
// unclippedLength

template <typename TSource, typename TGapAnchors> inline typename Size<Gaps<TSource, AnchorGaps<TGapAnchors> > >::Type unclippedLength(Gaps<TSource, AnchorGaps<TGapAnchors> > const & me);       	// "core/include/seqan/align/gaps_anchor.h"(329)

//____________________________________________________________________________
// upperBoundGapAnchor

template <typename TGapAnchor, typename TSearchValue> inline typename Iterator<TGapAnchor, Standard>::Type upperBoundGapAnchor(TGapAnchor const& gaps, TSearchValue const val, SortSeqPos);       	// "core/include/seqan/align/gap_anchor.h"(266)
template <typename TGapAnchor, typename TSearchValue> inline typename Iterator<TGapAnchor, Standard>::Type upperBoundGapAnchor(TGapAnchor const& gaps, TSearchValue const val, SortGapPos);       	// "core/include/seqan/align/gap_anchor.h"(282)

//____________________________________________________________________________
// value

template <typename TAlign, typename TPosition> inline typename Value<AlignCols<TAlign> >::Type value(AlignCols<TAlign> & me, TPosition _pos);       	// "core/include/seqan/align/align_cols.h"(264)
template <typename TAlign, typename TPosition> inline typename Value<AlignCols<TAlign> const>::Type value(AlignCols<TAlign> const & me, TPosition _pos);       	// "core/include/seqan/align/align_cols.h"(272)
template <typename TSequence, typename TGapAnchors, typename TPosition> inline typename Value<Gaps<TSequence, AnchorGaps<TGapAnchors> > >::Type value(Gaps<TSequence, AnchorGaps<TGapAnchors> > const & gaps, TPosition clippedViewPos);       	// "core/include/seqan/align/gaps_anchor.h"(395)
template <typename TGaps, typename TGapAnchors> inline typename Reference< Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > >::Type value(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > & it);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(208)
template <typename TGaps, typename TGapAnchors> inline typename Reference< Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const>::Type value(Iter<TGaps, GapsIterator<AnchorGaps<TGapAnchors> > > const & it);       	// "core/include/seqan/align/gaps_iterator_anchor.h"(216)
template <typename TGaps> inline typename Reference<Iter<TGaps, GapsIterator<ArrayGaps> > >::Type value(Iter<TGaps, GapsIterator<ArrayGaps> > & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(168)
template <typename TGaps> inline typename Reference<Iter<TGaps, GapsIterator<ArrayGaps> > const>::Type value(Iter<TGaps, GapsIterator<ArrayGaps> > const & it);       	// "core/include/seqan/align/gaps_iterator_array.h"(176)

//____________________________________________________________________________
// write

template <typename TFile, typename TSource, typename TSpec, typename TIDString> inline void write(TFile & target, Align<TSource, TSpec> const & source, TIDString const &, Raw);       	// "core/include/seqan/align/align_base.h"(402)
template <typename TFile, typename TSource, typename TIDString, typename TSpec> inline void write(TFile & target, Gaps<TSource, TSpec> const & source, TIDString const &, Raw);       	// "core/include/seqan/align/gaps_base.h"(305)

} //namespace seqan

#endif

